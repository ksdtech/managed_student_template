#!/bin/sh

# postflight for create_user script. 
# Original code from instadmg.googlecode.com
# svn checkout http://instadmg.googlecode.com/svn/trunk/AddOns/createUser/createUser.pkg/Contents/Resources

# Script variables from Apple Software Delivery Guide documentation
# $1:              Full path to the installation package the Installer 
#     application is processing. 
#     For example:  /Volumes/Users/michelle/Desktop/Levon.mpkg
# $2:              Full path to the installation destination.
#     For example: /Applications
# $3:              Installation volume (or mountpoint) to receive the payload. 
#     For example: / or /Volumes/Tools
# $4:              The root directory for the system: /
# $SCRIPT_NAME:    Filename of the operation executable.
#     For example: preflight
# $PACKAGE_PATH:   Full path to the installation package. Same as $1.
# $INSTALLER_TEMP: Scratch directory used by Installer to place its 
#     temporary work files. Install operations may use this area for their 
#     temporary work, too, but must not overwrite any Installer files. The 
#     Installer application erases this directory at the end of the install. 
#     For example: /private/tmp/.Levon.pkg.897.install
# $RECEIPT_PATH:   Full path to a temporary directory containing the
#     operation executable. This is a subdirectory of $INSTALLER_TEMP. 
#     This location may vary between installs. The executable can use this 
#     path to locate other files in the package. For example:
#     /private/tmp/.Levon.pkg.897.install/Receipts/Levon.pkg/Contents/Resources

ME=$0
SCRIPT_DIR="$1/Contents/Resources"
TARGET_DIR="$3"

# load vars - shortname, longname, uid, gid, etc.
. "${SCRIPT_DIR}/USERDATA"

check_os() {
	
	# detect what tools the host OS uses
	# ToDo: verify that this is not required
	if [ -x "/usr/bin/dscl" ] && [ -d "/var/db/dslocal/nodes/Default" ]; then
		# looks like 10.5+
		HOST_OS="10.5 or later"
	
	elif [ -x "/usr/bin/nicl" ] && [ -e "/var/db/netinfo/local.nidb" ]; then
		# looks like 10.4
		HOST_OS="10.4"
	
	else
		echo "This host OS is not supported"
		exit 3
	fi
	
	# detect what tools the target OS uses
	if [ -x "$TARGET_DIR/usr/bin/dscl" ] && [ -d "$TARGET_DIR/var/db/dslocal/nodes/Default" ]; then
		# looks like 10.5+
		TARGET_OS="10.5 or later"
		
		DSLocalDB="${TARGET_DIR}/var/db/dslocal/nodes/Default"
	
		if [ ! -e "$DSLocalDB" ]; then
			echo "Can't find target ${DSLocalDB}"
			exit 2
		fi
		
		serviceCmd="${TARGET_DIR}/usr/bin/dscl"
		prefix='-f'
		dsNode=${DSLocalDB}
		suffix="localonly"
		groupkey="GroupMembership"
	
		uidKey="UniqueID"
		databasePath="/Local/Target/"
		userRoot="${databasePath}Users"
		userPath="${userRoot}/${shortname}"
		groupPath="${databasePath}Groups/${shortname}"
		adminPath="${databasePath}Groups/admin"
		
	elif [ -x "$TARGET_DIR/usr/bin/nicl" ] && [ -e "$TARGET_DIR/var/db/netinfo/local.nidb" ]; then
		# looks like 10.4
		TARGET_OS="10.4"
		
		NetInfoDB="$TARGET_DIR/var/db/netinfo/local.nidb";
	
		if [ ! -e "${NetInfoDB}" ]; then
			echo "Can't find target ${DSLocalDB}"
			exit 2
		fi
	
		serviceCmd="$TARGET_DIR/usr/bin/nicl"
		prefix='-raw'
		dsNode="$NetInfoDB"
		suffix=""
		databasePath="/";
		groupkey="users"
		if [ ${#genUID} -ne 36 ]; then
			genUID=`/usr/bin/uuidgen`
		fi
	
		uidKey="uid"
		userRoot="${databasePath}users"
		userPath="${userRoot}/${shortname}"
		groupPath="${databasePath}groups/${shortname}"
		adminPath="${databasePath}groups/admin"
		
	else
		echo "This target OS is not supported"
		exit 3
	fi
	
	# If the host OS and target OS don't use the same tools bail
	# ToDo: verify that this is actually a problem
	if [ "$HOST_OS" != "$TARGET_OS" ]; then
		echo "The host OS ($HOST_OS) and target OS ($TARGET_OS) do not use the same directory tools, so this script cannot run."
		exit 3
	fi

}

check_uid()
{
	if [ ${#uid} -eq 0 ]; then
		#search for unused uid after 500
		for ((uid=501; uid<600; uid++)); do
			output=`"$serviceCmd" $prefix "$dsNode" $suffix -search $userRoot $uidKey $uid`
			if [ "$output" == "" ]; then
				break
			fi
		done
	fi 
	
	#make sure uid is only digits. We probably ought to test for valid uid ranges too. for now just 100+
	if [ ! `echo $uid | grep -E "^[1-9][0-9]{2,9}$"` ] ; then
		echo "Bad UID $uid"
		exit 1
	fi
}

check_shortname()
{
	#we're being extra safe here. shortname must be 1 to 31 alphanumeric characters (first is alpha).
	if ! echo $shortname | grep -E "^[a-zA-Z_][a-zA-Z0-9_]{0,30}$">/dev/null ; then
		echo "Bad shortname ${shortname:-(empty)}"
		echo "Short name should only be lowercase letters or numbers (max 31 for simplicity)"
		exit 1
	fi
	
	SHORTNAME=`echo $shortname | tr "[:lower:]" "[:upper:]"`
}

check_password()
{
	#check for password_hash file
	if [ -f "${SCRIPT_DIR}/password_hash" ]; then
		password_hash=`cat "${SCRIPT_DIR}/password_hash"`
	fi

	if [ ${#password_hash} -ne 1240 ]; then
		if [ ${#password} -lt 1 ]; then
			echo "Invalid password"
			exit 1
		else 
			#generate password hash
			password_hash=`"${SCRIPT_DIR}/shadowHash" $password`
		fi
	fi
}

check_longname()
{
	#use shortname for longname if we didn't specify
	if [ ${#longname} -eq 0 ]; then
		longname=$shortname
	fi
}

check_gid()
{
	if [ ${#gid} -eq 0 ]; then
		gid=20
	fi

	#make sure gid is only digits. 
	if [ ! `echo $gid | grep -E "^[0-9]+$"` ] ; then
		echo "Bad GID $gid"
		exit 1
	fi
}

check_pic()
{
	if [ ${#pic} -eq 0 ]; then
		pic="/Library/User Pictures/Nature/Zen.tif"
	fi
}

check_shell()
{
	if [ ${#shell} -eq 0 ]; then
		shell="/bin/bash"
	fi
}

check_home()
{
	if [ ${#user_home} -eq 0 ]; then
		user_home="/Users/%u"
	fi
	
	#substitute placeholders
	user_home=`echo $user_home | sed -e "s/%u/${shortname}/" -e "s/%n/$uid/" -e "s/%l/${shortname:0:1}/" -e "s/%L/${SHORTNAME:0:1}/"`
}


check_os
check_shortname
check_password
check_uid 
check_gid
check_pic
check_shell
check_home

# PZINGG check to see if there is an existing 502 user, and remove it
existingUser=`"${SCRIPT_DIR}/getStudentUser"`
if [ "$existingUser" != "" ]; then
	echo "Removing existing user $existingUser using: $serviceCmd $prefix $dsNode $suffix"
	existingUserPath="${userRoot}/${existingUser}"
	"$serviceCmd" $prefix "$dsNode" $suffix -delete $existingUserPath || exit 1	
fi

echo "Creating new user $shortname using: $serviceCmd $prefix $dsNode $suffix"
#these are the commands needed to create a base user. it will bail out if the first command fails
"$serviceCmd" $prefix "$dsNode" $suffix -create $userPath || exit 1
"$serviceCmd" $prefix "$dsNode" $suffix -create $userPath realname "${longname}"
"$serviceCmd" $prefix "$dsNode" $suffix -create $userPath gid ${gid}
"$serviceCmd" $prefix "$dsNode" $suffix -create $userPath $uidKey ${uid}
"$serviceCmd" $prefix "$dsNode" $suffix -create $userPath home "${user_home}"
"$serviceCmd" $prefix "$dsNode" $suffix -merge $userPath authentication_authority ";ShadowHash;"
"$serviceCmd" $prefix "$dsNode" $suffix -create $userPath picture "${pic}"
"$serviceCmd" $prefix "$dsNode" $suffix -create $userPath passwd "*"
"$serviceCmd" $prefix "$dsNode" $suffix -create $userPath shell "${shell}"

# lookup/save generated uid
if [ ${#genUID} -eq 36 ]; then
	#save guid if we specified one
	"$serviceCmd" $prefix "$dsNode" $suffix -create $userPath generateduid ${genUID}
else 
	#otherwise get the auto generated one 
	genUID=`"$serviceCmd" $prefix "$dsNode" $suffix -read ${userPath} generateduid|awk '{print $2}'`
fi

#create shadow hash folder if necessary and set perms
if [ ! -d "${TARGET_DIR}/var/db/shadow/hash" ]; then
	/bin/mkdir -p "${TARGET_DIR}/var/db/shadow/hash"
	/usr/sbin/chown -R 0:0 "${TARGET_DIR}/var/db/shadow"
	/bin/chmod 700 "${TARGET_DIR}/var/db/shadow"
fi 

#create shadow hash file and set perms
echo "$password_hash">"${TARGET_DIR}/var/db/shadow/hash/$genUID"
/bin/chmod 600 "${TARGET_DIR}/var/db/shadow/hash/$genUID"

#if admin flag is set, then add user to admin group
if [ $admin -eq 1 ]; then
	"$serviceCmd" $prefix "$dsNode" $suffix -merge $adminPath $groupkey "${shortname}"
fi

if [ $hide_user -eq 1 ]; then
	/usr/bin/defaults write "${TARGET_DIR}/Library/Preferences/com.apple.loginwindow" HiddenUsersList -array-add $shortname
fi

# PZINGG check to see if there is an existing 502 group, and remove it
existingGroup=`"${SCRIPT_DIR}/getStudentGroup"`
if [ "$existingUser" != "" ]; then
	echo "Removing existing group $existingGroup using: $serviceCmd $prefix $dsNode $suffix"
	existingUserPath="${userRoot}/${existingGroup}"
	"$serviceCmd" $prefix "$dsNode" $suffix -delete $existingGroupPath || exit 1	
fi

echo "Creating new group $shortname using: $serviceCmd $prefix $dsNode $suffix"
# these are the commands needed to create a base group. it will bail out if the first command fails
# hard coded to gid 502 and corresponding generateduid (last part is 502 in hex = 1f6)
"$serviceCmd" $prefix "$dsNode" $suffix -create $groupPath || exit 1
"$serviceCmd" $prefix "$dsNode" $suffix -create $groupPath realname "${longname}"
"$serviceCmd" $prefix "$dsNode" $suffix -create $groupPath gid "502"
"$serviceCmd" $prefix "$dsNode" $suffix -create $groupPath generateduid "ABCDEFAB-CDEF-ABCD-EFAB-CDEF000001F6"
"$serviceCmd" $prefix "$dsNode" $suffix -create $groupPath passwd "*"

# set up mcx preferences (Dock, etc) in NetInfo or dslocal
. "${SCRIPT_DIR}/set_mcx_prefs"

# AKORFF
# Install the login hook
defaults write com.apple.loginwindow LoginHook /Users/Shared/Administrative/iHook/login.hook

# Use the 'kickstart' function of the apple remote desktop agent to turn access on for the just-created user
#/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -users $shortname -privs -all -restart -agent -target "$3"

exit 0
